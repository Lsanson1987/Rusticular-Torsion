import { LineEdit, Button, Slider, HorizontalBox, VerticalBox, ProgressIndicator, StandardTableView, GroupBox, CheckBox, Switch } from "std-widgets.slint";
// This code offers a datastructure and callback for the table view page
// note: this code is taken from one of the examples in the documentation, https://docs.slint.dev/latest/demos/gallery/
export global TableViewPageAdapter  {
    in-out property <int> name; in-out property <[[StandardListViewItem]]> row_data: [];
    pure callback filter_sort_model([[StandardListViewItem]], string, int, bool) -> [[StandardListViewItem]];
}

export component TableViewPage inherits Window {
    // setting up all the properties that need to communicate between front and back end
    in-out property <duration> total-time: slider.value * 1s;
    in-out property <duration> elapsed-time;
    in-out property <int> name; 
    in-out property <string> current-initiative: "";
    in-out property <string> current-name: "";
    in-out property <string> current-ac: "";
    in-out property <string> current-hp: "";
    in-out property <bool> switched: false;
    // properties for back end only
    private property <bool> timer-running: false;
    property <int> sort-index: -1;
    property <bool> sort-acending;
    // callbacks to use in the rust backend
    callback add-row();
    callback delete_row_by_name();

    // Start of the UI definition for our table
    title: @tr("TableView");
    HorizontalBox {
        vertical-stretch: 1;
        // Create a box to store table, filter, and buttons
        GroupBox {
            title: @tr("Initative Tracker");
            vertical-stretch: 0;

            VerticalLayout {
                
                StandardTableView {
                    sort-ascending(index) => {
                        root.sort-index = index;
                        root.sort-acending = true;
                    }

                    sort-descending(index) => {
                        root.sort-index = index;
                        root.sort-acending = false;
                    }
                    // create the columns for the table
                    columns: [
                        { 
                        title: @tr("Initiative")     
                        },
                        { title: @tr("Name") },
                        { title: @tr("AC") },
                        { title: @tr("HP") },
                    ];
                    // create the rows for the table dynamically, based on the row_data property and the filter_sort_model callback
                    // note: this code snippet is taken from one of the examples in the documentation, https://docs.slint.dev/latest/demos/gallery/
                    rows: TableViewPageAdapter.filter_sort_model(TableViewPageAdapter.row_data, filter-edit.text, root.sort-index, root.sort-acending);
                }

                VerticalLayout {
                    // create a filter for the table
                    Text {
                        text: @tr("Filter by Name:");
                    }
                    filter-edit := LineEdit {
                        placeholder-text: @tr("Enter filter text");
                    }
                }   
                // create inputs for the user to add new rows to the table
                HorizontalBox {
                    LineEdit {
                        font-size: 14px;
                        placeholder-text: "Enter initiative";
                        text <=> root.current-initiative;

                    }
                    LineEdit {
                        font-size: 14px;
                        placeholder-text: "Enter Name";
                        text <=> root.current-name;
                    }
                    LineEdit {
                        font-size: 14px;
                        placeholder-text: "Enter AC";
                        text <=> root.current-ac;
                    }
                    LineEdit {
                        font-size: 14px;
                        placeholder-text: "Enter HP";
                        text <=> root.current-hp;
                    }
                    // add a switch to toggle clearing inputs after adding a row for unique vs horde enemies
                    Switch {
                        text: "Clear Inputs After Adding?";
                        toggled => {
                            root.switched = !root.switched;
                        }
                    }
                    // add a button to add a new row to the table
                    Button {
                        text: @tr("Add Row");
                        clicked => {
                            root.add-row();
                            // clear the inputs after adding a row, useful for unique enemies, but it makes it more tedious to spam horde enemies 
                            if (root.switched) {
                                root.current-initiative = "";
                                root.current-ac = "";
                                root.current-hp = "";
                                root.current-name = "";
                            }  
                        }
                    }
                    // sort initiative button uses callback to sort the table by initiative
                    Button {
                        text: @tr("Sort by Initiative");
                        clicked => {
                            root.sort-index = 0; 
                            root.sort-acending = false; 
                            TableViewPageAdapter.filter_sort_model(
                                TableViewPageAdapter.row_data,
                                filter-edit.text,
                                root.sort-index,
                                root.sort-acending
                            );
                        }
                    }
                }
                HorizontalBox {
                    // create inputs for the user to delete rows from the table
                    LineEdit {
                        font-size: 14px;
                        placeholder-text: "Enter Name to Delete";
                        text <=> root.current-name; 
                    }
                    LineEdit {
                        font-size: 14px;
                        placeholder-text: "Enter Initiative to Delete";
                        text <=> root.current-initiative; 
                    }
                    // add a button to delete a row from the table using a callback
                    Button {
                        text: @tr("Delete Row");
                        clicked => {
                            root.delete_row_by_name();
                        }
                    }
                }
                
                
            }
        }
        VerticalBox {
            // create a timer to track time for combat
            Timer {
                interval: 10ms;
                running: root.timer-running;
                triggered => {
                    root.elapsed-time += self.interval;
                    root.elapsed-time = min(root.elapsed-time, root.total-time);
                }
            }
            HorizontalBox {
                padding: 0;
                Text { 
                    text: "Elapsed Time:"; 
                }
                // show current progress of the timer in a progress bar
                ProgressIndicator {
                    preferred-width: 100px;
                    progress: elapsed-time / total-time;
                }
            }
            // use numbers since progress bar is difficult to interpret with large numbers
            Text{
                text: "Elapsed time: " + (root.elapsed-time / 1s) + "s";
            }
            Text{
                text: "total time: " + (root.total-time / 1s) + "s";
            }
            HorizontalBox {
                padding: 0;
                Text {
                    text: "Duration:";
                    vertical-alignment: center;
                }
                slider := Slider {
                    maximum: 9.22882; // Log 2 scale
                    value: 60; // default time
                    // I made the slider scale using a logarithm to make it easier to select larger time values 
                    // while still allowing fine control over smaller values
                    changed(new-log-value) => {
                        root.total-time = pow(2, new-log-value) * 1s;
                        root.elapsed-time = min(root.elapsed-time, root.total-time);
                    }
                }
            }
            // add buttons to start, stop, and reset the timer
            HorizontalBox {
                spacing: 10px;
                Button {
                    text: "Start";
                    clicked => {
                        root.timer-running = true;
                    }
                }
                Button {
                    text: "Stop";
                    clicked => {
                        root.timer-running = false;
                    }
                }
                Button {
                    text: "Reset";
                    clicked => {
                        root.timer-running = false;
                        root.elapsed-time = 0;
                    }
                }
            }
        }
    }

}
        
        

