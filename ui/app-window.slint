import { LineEdit, Button, Slider, HorizontalBox, VerticalBox, ProgressIndicator, StandardTableView, GroupBox } from "std-widgets.slint";

export global TableViewPageAdapter  {
    in property <[[StandardListViewItem]]> row_data: [
    ];
    
    pure callback filter_sort_model([[StandardListViewItem]], string, int, bool) -> [[StandardListViewItem]];
}

export component TableViewPage inherits Window {
    in-out property <duration> total-time: slider.value * 1s;
    in-out property <duration> elapsed-time;
    private property <bool> timer-running: false;
    property <int> sort-index: -1;
    property <bool> sort-acending;

    
    title: @tr("TableView");
    
    HorizontalBox {
        vertical-stretch: 1;

        GroupBox {
            title: @tr("StandardTableView");
            vertical-stretch: 0;

            VerticalLayout {
                
                StandardTableView {
                    sort-ascending(index) => {
                        root.sort-index = index;
                        root.sort-acending = true;
                    }

                    sort-descending(index) => {
                        root.sort-index = index;
                        root.sort-acending = false;
                    }

                    columns: [
                        { 
                            title: @tr("Initiative")     
                        },
                        { title: @tr("Name") },
                        { title: @tr("AC") },
                        { title: @tr("HP") },
                    ];
                    rows: TableViewPageAdapter.filter_sort_model(TableViewPageAdapter.row_data, filter-edit.text, root.sort-index, root.sort-acending);
                }

                VerticalLayout {
                    Text {
                        text: @tr("Filter by Header 1:");
                    }

                    filter-edit := LineEdit {
                        placeholder-text: @tr("Enter filter text");
                    }
                }   
            }
       }
        Timer {
            interval: 10ms;
            running: root.timer-running;
            triggered => {
                root.elapsed-time += self.interval;
                root.elapsed-time = min(root.elapsed-time, root.total-time);
            }
        }

        VerticalBox {
            HorizontalBox {
                padding: 0;
                Text { text: "Elapsed Time:"; }
                ProgressIndicator {
                    preferred-width: 100px;
                    progress: elapsed-time / total-time;
                }
            }
            Text{
                text: (root.total-time / 1s) + "s";
            }
            HorizontalBox {
                padding: 0;
                Text {
                    text: "Duration:";
                    vertical-alignment: center;
                }
                slider := Slider {
                    maximum: 9.22882; // Log 2 scale
                    value: 5.90689; // log2(60s)  
                    changed(new-log-value) => {
                        root.total-time = pow(2, new-log-value) * 1s;
                        root.elapsed-time = min(root.elapsed-time, root.total-time);
                    }
                }
            }
            HorizontalBox {
                spacing: 10px;
                Button {
                    text: "Start";
                    clicked => {
                        root.timer-running = true;
                    }
                }
                Button {
                    text: "Stop";
                    clicked => {
                        root.timer-running = false;
                    }
                }
                Button {
                    text: "Reset";
                    clicked => {
                        root.timer-running = false;
                        root.elapsed-time = 0;
                    }
                }
            }
        }
    }
}

export component MainWindow inherits Window {
    in-out property <duration> total-time: slider.value * 1s;
    in-out property <duration> elapsed-time;
    private property <bool> timer-running: false;

    Timer {
        interval: 10ms;
        running: root.timer-running;
        triggered => {
            root.elapsed-time += self.interval;
            root.elapsed-time = min(root.elapsed-time, root.total-time);
        }
    }

    VerticalBox {
        HorizontalBox {
            padding: 0;
            Text { text: "Elapsed Time:"; }
            ProgressIndicator {
                preferred-width: 100px;
                progress: elapsed-time / total-time;
            }
        }
        Text{
            text: (root.total-time / 1s) + "s";
        }
        HorizontalBox {
            padding: 0;
            Text {
                text: "Duration:";
                vertical-alignment: center;
            }
            slider := Slider {
                maximum: 9.22882; // Log 2 scale
                value: 5.90689; // log2(60s)  
                changed(new-log-value) => {
                    root.total-time = pow(2, new-log-value) * 1s;
                    root.elapsed-time = min(root.elapsed-time, root.total-time);
                }
            }
        }
        HorizontalBox {
            spacing: 10px;
            Button {
                text: "Start";
                clicked => {
                    root.timer-running = true;
                }
            }
            Button {
                text: "Stop";
                clicked => {
                    root.timer-running = false;
                }
            }
            Button {
                text: "Reset";
                clicked => {
                    root.timer-running = false;
                    root.elapsed-time = 0;
                }
            }
        }
    }
}

